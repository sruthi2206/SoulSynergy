import { useState } from "react";
import { motion } from "framer-motion";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { useToast } from "@/hooks/use-toast";
import { apiRequest } from "@/lib/queryClient";
import { useAuth } from "@/hooks/use-auth";
import { Textarea } from "@/components/ui/textarea";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle, CardDescription, CardFooter } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { 
  Calendar, 
  BookOpen, 
  Sparkles, 
  MicOff, 
  Mic, 
  Bookmark, 
  Star, 
  ListTodo, 
  Rocket, 
  Target, 
  Languages, 
  MessageSquareText,
  XCircle,
  PlusCircle
} from "lucide-react";
import { formatDistanceToNow } from "date-fns";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";

// Indian languages supported in the journal
const LANGUAGES = [
  { name: "English", code: "english" },
  { name: "Hindi", code: "hindi" },
  { name: "Bengali", code: "bengali" },
  { name: "Tamil", code: "tamil" },
  { name: "Telugu", code: "telugu" },
  { name: "Marathi", code: "marathi" },
  { name: "Gujarati", code: "gujarati" },
  { name: "Kannada", code: "kannada" },
  { name: "Malayalam", code: "malayalam" },
  { name: "Punjabi", code: "punjabi" },
  { name: "Urdu", code: "urdu" }
];

// Define translations for UI elements in different languages
const TRANSLATIONS: Record<string, Record<string, string>> = {
  english: {
    title: "Daily Alignment Journal",
    subtitle: "Record your thoughts, emotions, and goals with AI-powered insights to guide your healing journey",
    newEntry: "New Journal Entry",
    newEntryDescription: "Express your thoughts, emotions, and aspirations in this structured journal",
    general: "General",
    gratitude: "Gratitude",
    affirmation: "Affirmation",
    shortTerm: "Short-Term",
    longTerm: "Long-Term",
    insightsTitle: "Journal Insights",
    insightsDescription: "AI-generated insights from your journal entries",
    generalTitle: "ЁЯТн General Reflections",
    generalDescription: "Write freely about your thoughts, emotions, and experiences",
    generalPlaceholder: "How are you feeling today? What's on your mind?",
    gratitudeTitle: "тЬи I am grateful for...",
    gratitudeDescription: "List things that brought you joy, peace, or inspiration today",
    gratitudePlaceholder: "Gratitude",
    affirmationTitle: "ЁЯМЯ Today's Affirmation",
    affirmationDescription: "Write a positive I AM statement to align your energy",
    affirmationPlaceholder: "I am...",
    shortTermTitle: "ЁЯОп Steps I will take today",
    shortTermDescription: "What key actions will move you forward today?",
    shortTermPlaceholder: "Step",
    longTermTitle: "ЁЯЪА Steps toward my long-term goals",
    longTermDescription: "What aligned actions or habits will move you toward your vision?",
    longTermPlaceholder: "My long-term vision includes...",
    saveButton: "Save Entry",
    addAnother: "Add Another",
    emotionPatterns: "Emotion Patterns",
    chakraBalance: "Chakra Balance",
    goalProgress: "Goal Progress",
    personalizedWisdom: "Personalized Wisdom",
    noEntries: "No journal entries yet",
    startWriting: "Start writing to see your insights here"
  },
  hindi: {
    title: "рджреИрдирд┐рдХ рд╕рдВрд░реЗрдЦрдг рдЬрд░реНрдирд▓",
    subtitle: "рдЕрдкрдиреЗ рдЙрдкрдЪрд╛рд░ рдпрд╛рддреНрд░рд╛ рдХреЛ рдорд╛рд░реНрдЧрджрд░реНрд╢рди рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП AI-рд╕рдВрдЪрд╛рд▓рд┐рдд рдЕрдВрддрд░реНрджреГрд╖реНрдЯрд┐ рдХреЗ рд╕рд╛рде рдЕрдкрдиреЗ рд╡рд┐рдЪрд╛рд░реЛрдВ, рднрд╛рд╡рдирд╛рдУрдВ рдФрд░ рд▓рдХреНрд╖реНрдпреЛрдВ рдХреЛ рд░рд┐рдХреЙрд░реНрдб рдХрд░реЗрдВ",
    newEntry: "рдирдИ рдЬрд░реНрдирд▓ рдПрдВрдЯреНрд░реА",
    newEntryDescription: "рдЗрд╕ рд╕рдВрд░рдЪрд┐рдд рдЬрд░реНрдирд▓ рдореЗрдВ рдЕрдкрдиреЗ рд╡рд┐рдЪрд╛рд░реЛрдВ, рднрд╛рд╡рдирд╛рдУрдВ рдФрд░ рдЖрдХрд╛рдВрдХреНрд╖рд╛рдУрдВ рдХреЛ рд╡реНрдпрдХреНрдд рдХрд░реЗрдВ",
    general: "рд╕рд╛рдорд╛рдиреНрдп",
    gratitude: "рдХреГрддрдЬреНрдЮрддрд╛",
    affirmation: "рджреГрдврд╝реАрдХрд░рдг",
    shortTerm: "рдЕрд▓реНрдкрдХрд╛рд▓рд┐рдХ",
    longTerm: "рджреАрд░реНрдШрдХрд╛рд▓рд┐рдХ",
    insightsTitle: "рдЬрд░реНрдирд▓ рдЕрдВрддрд░реНрджреГрд╖реНрдЯрд┐",
    insightsDescription: "рдЖрдкрдХреА рдЬрд░реНрдирд▓ рдкреНрд░рд╡рд┐рд╖реНрдЯрд┐рдпреЛрдВ рд╕реЗ AI-рдирд┐рд░реНрдорд┐рдд рдЕрдВрддрд░реНрджреГрд╖реНрдЯрд┐",
    generalTitle: "ЁЯТн рд╕рд╛рдорд╛рдиреНрдп рдЪрд┐рдВрддрди",
    generalDescription: "рдЕрдкрдиреЗ рд╡рд┐рдЪрд╛рд░реЛрдВ, рднрд╛рд╡рдирд╛рдУрдВ рдФрд░ рдЕрдиреБрднрд╡реЛрдВ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рд╕реНрд╡рддрдВрддреНрд░ рд░реВрдк рд╕реЗ рд▓рд┐рдЦреЗрдВ",
    generalPlaceholder: "рдЖрдЬ рдЖрдк рдХреИрд╕рд╛ рдорд╣рд╕реВрд╕ рдХрд░ рд░рд╣реЗ рд╣реИрдВ? рдЖрдкрдХреЗ рдорди рдореЗрдВ рдХреНрдпрд╛ рд╣реИ?",
    gratitudeTitle: "тЬи рдореИрдВ рдЗрд╕рдХреЗ рд▓рд┐рдП рдЖрднрд╛рд░реА рд╣реВрдБ...",
    gratitudeDescription: "рдЙрди рдЪреАрдЬреЛрдВ рдХреА рд╕реВрдЪреА рдмрдирд╛рдПрдВ рдЬрд┐рдиреНрд╣реЛрдВрдиреЗ рдЖрдкрдХреЛ рдЖрдЬ рдЦреБрд╢реА, рд╢рд╛рдВрддрд┐ рдпрд╛ рдкреНрд░реЗрд░рдгрд╛ рджреА",
    gratitudePlaceholder: "рдХреГрддрдЬреНрдЮрддрд╛",
    affirmationTitle: "ЁЯМЯ рдЖрдЬ рдХрд╛ рджреГрдврд╝реАрдХрд░рдг",
    affirmationDescription: "рдЕрдкрдиреА рдКрд░реНрдЬрд╛ рдХреЛ рд╕рдВрд░реЗрдЦрд┐рдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдПрдХ рд╕рдХрд╛рд░рд╛рддреНрдордХ рдореИрдВ рд╣реВрдБ рдХрдерди рд▓рд┐рдЦреЗрдВ",
    affirmationPlaceholder: "рдореИрдВ рд╣реВрдБ...",
    shortTermTitle: "ЁЯОп рдЖрдЬ рдореИрдВ рдЬреЛ рдХрджрдо рдЙрдард╛рдКрдВрдЧрд╛",
    shortTermDescription: "рдХреМрди рд╕реЗ рдкреНрд░рдореБрдЦ рдХрд╛рд░реНрдп рдЖрдкрдХреЛ рдЖрдЬ рдЖрдЧреЗ рдмрдврд╝рд╛рдПрдВрдЧреЗ?",
    shortTermPlaceholder: "рдХрджрдо",
    longTermTitle: "ЁЯЪА рдореЗрд░реЗ рджреАрд░реНрдШрдХрд╛рд▓рд┐рдХ рд▓рдХреНрд╖реНрдпреЛрдВ рдХреА рдУрд░ рдХрджрдо",
    longTermDescription: "рдХреМрди рд╕реЗ рд╕рдВрд░реЗрдЦрд┐рдд рдХрд╛рд░реНрдп рдпрд╛ рдЖрджрддреЗрдВ рдЖрдкрдХреЛ рдЕрдкрдиреА рджреГрд╖реНрдЯрд┐ рдХреА рдУрд░ рд▓реЗ рдЬрд╛рдПрдВрдЧреА?",
    longTermPlaceholder: "рдореЗрд░реА рджреАрд░реНрдШрдХрд╛рд▓рд┐рдХ рджреГрд╖реНрдЯрд┐ рдореЗрдВ рд╢рд╛рдорд┐рд▓ рд╣реИ...",
    saveButton: "рдкреНрд░рд╡рд┐рд╖реНрдЯрд┐ рд╕рд╣реЗрдЬреЗрдВ",
    addAnother: "рдПрдХ рдФрд░ рдЬреЛрдбрд╝реЗрдВ",
    emotionPatterns: "рднрд╛рд╡рдирд╛ рдкреИрдЯрд░реНрди",
    chakraBalance: "рдЪрдХреНрд░ рд╕рдВрддреБрд▓рди",
    goalProgress: "рд▓рдХреНрд╖реНрдп рдкреНрд░рдЧрддрд┐",
    personalizedWisdom: "рд╡реНрдпрдХреНрддрд┐рдЧрдд рдЬреНрдЮрд╛рди",
    noEntries: "рдЕрднреА рддрдХ рдХреЛрдИ рдЬрд░реНрдирд▓ рдкреНрд░рд╡рд┐рд╖реНрдЯрд┐рдпрд╛рдБ рдирд╣реАрдВ рд╣реИрдВ",
    startWriting: "рдЕрдкрдиреА рдЕрдВрддрд░реНрджреГрд╖реНрдЯрд┐ рдпрд╣рд╛рдВ рджреЗрдЦрдиреЗ рдХреЗ рд▓рд┐рдП рд▓рд┐рдЦрдирд╛ рд╢реБрд░реВ рдХрд░реЗрдВ"
  },
  tamil: {
    title: "родро┐ройроЪро░ро┐ роЪрпАро░роорпИрокрпНрокрпБ рокродро┐ро╡рпЗроЯрпБ",
    subtitle: "роЙроЩрпНроХро│рпН роХрпБрогрооро╛роХрпНроХро▓рпН рокропрогродрпНродрпИ ро╡ро┤ро┐роироЯродрпНрод AI-роЙро░рпБро╡ро╛роХрпНроХро┐роп роирпБрогрпНрогро▒ро┐ро╡рпБроХро│рпБроЯройрпН роЙроЩрпНроХро│рпН роОрогрпНрогроЩрпНроХро│рпН, роЙрогро░рпНро╡рпБроХро│рпН рооро▒рпНро▒рпБроорпН роЗро▓роХрпНроХрпБроХро│рпИрокрпН рокродро┐ро╡рпБ роЪрпЖропрпНропрпБроЩрпНроХро│рпН",
    newEntry: "рокрпБродро┐роп рокродро┐ро╡рпЗроЯрпБ роЙро│рпНро│рпАроЯрпБ",
    newEntryDescription: "роЗроирпНрод роХроЯрпНроЯроорпИроХрпНроХрокрпНрокроЯрпНроЯ рокродро┐ро╡рпЗроЯрпНроЯро┐ро▓рпН роЙроЩрпНроХро│рпН роОрогрпНрогроЩрпНроХро│рпН, роЙрогро░рпНро╡рпБроХро│рпН рооро▒рпНро▒рпБроорпН ро╡ро┐ро░рпБрокрпНрокроЩрпНроХро│рпИ ро╡рпЖро│ро┐рокрпНрокроЯрпБродрпНродрпБроЩрпНроХро│рпН",
    general: "рокрпКродрпБ",
    gratitude: "роиройрпНро▒ро┐",
    affirmation: "роЙро▒рпБродро┐роорпКро┤ро┐",
    shortTerm: "роХрпБро▒рпБроХро┐роп роХро╛ро▓",
    longTerm: "роирпАрогрпНроЯ роХро╛ро▓",
    insightsTitle: "рокродро┐ро╡рпЗроЯрпБ роирпБрогрпНрогро▒ро┐ро╡рпБроХро│рпН",
    insightsDescription: "роЙроЩрпНроХро│рпН рокродро┐ро╡рпБроХро│ро┐ро▓рпН роЗро░рпБроирпНродрпБ AI роЙро░рпБро╡ро╛роХрпНроХро┐роп роирпБрогрпНрогро▒ро┐ро╡рпБроХро│рпН",
    generalTitle: "ЁЯТн рокрпКродрпБ роЪро┐роирпНродройрпИроХро│рпН",
    generalDescription: "роЙроЩрпНроХро│рпН роОрогрпНрогроЩрпНроХро│рпН, роЙрогро░рпНро╡рпБроХро│рпН рооро▒рпНро▒рпБроорпН роЕройрпБрокро╡роЩрпНроХро│рпИ роЪрпБродроирпНродро┐ро░рооро╛роХ роОро┤рпБродрпБроЩрпНроХро│рпН",
    generalPlaceholder: "роЗройрпНро▒рпБ роирпАроЩрпНроХро│рпН роОрокрпНрокроЯро┐ роЙрогро░рпНроХро┐ро▒рпАро░рпНроХро│рпН? роЙроЩрпНроХро│рпН рооройродро┐ро▓рпН роОройрпНрой роЙро│рпНро│родрпБ?",
    gratitudeTitle: "тЬи роиро╛ройрпН роЗродро▒рпНроХрпБ роиройрпНро▒ро┐ропрпБро│рпНро│ро╡ройрпН...",
    gratitudeDescription: "роЗройрпНро▒рпБ роЙроЩрпНроХро│рпБроХрпНроХрпБ роороХро┐ро┤рпНроЪрпНроЪро┐, роЕроорпИродро┐ роЕро▓рпНро▓родрпБ роКроХрпНроХродрпНродрпИ роЕро│ро┐родрпНрод ро╡ро┐ро╖ропроЩрпНроХро│рпИ рокроЯрпНроЯро┐ропро▓ро┐роЯрпБроЩрпНроХро│рпН",
    gratitudePlaceholder: "роиройрпНро▒ро┐",
    affirmationTitle: "ЁЯМЯ роЗройрпНро▒рпИроп роЙро▒рпБродро┐роорпКро┤ро┐",
    affirmationDescription: "роЙроЩрпНроХро│рпН роЪроХрпНродро┐ропрпИ роЪрпАро░роорпИроХрпНроХ роТро░рпБ роирпЗро░рпНрооро▒рпИропро╛рой роиро╛ройрпН роЗро░рпБроХрпНроХро┐ро▒рпЗройрпН роЕро▒ро┐роХрпНроХрпИропрпИ роОро┤рпБродрпБроЩрпНроХро│рпН",
    affirmationPlaceholder: "роиро╛ройрпН роЗро░рпБроХрпНроХро┐ро▒рпЗройрпН...",
    shortTermTitle: "ЁЯОп роЗройрпНро▒рпБ роиро╛ройрпН роОроЯрпБроХрпНроХрпБроорпН роироЯро╡роЯро┐роХрпНроХрпИроХро│рпН",
    shortTermDescription: "роОроирпНрод роорпБроХрпНроХро┐роп роЪрпЖропро▓рпНроХро│рпН роЙроЩрпНроХро│рпИ роЗройрпНро▒рпБ роорпБройрпНройрпЗро▒рпНро▒рпБроорпН?",
    shortTermPlaceholder: "рокроЯро┐",
    longTermTitle: "ЁЯЪА роОройрпН роирпАрогрпНроЯ роХро╛ро▓ роЗро▓роХрпНроХрпБроХро│рпИ роирпЛроХрпНроХро┐роп рокроЯро┐роХро│рпН",
    longTermDescription: "роОроирпНрод роЪрпАро░роорпИроХрпНроХрокрпНрокроЯрпНроЯ роЪрпЖропро▓рпНроХро│рпН роЕро▓рпНро▓родрпБ рокро┤роХрпНроХроЩрпНроХро│рпН роЙроЩрпНроХро│рпИ роЙроЩрпНроХро│рпН родрпКро▓рпИроирпЛроХрпНроХрпИ роирпЛроХрпНроХро┐ роироХро░рпНродрпНродрпБроорпН?",
    longTermPlaceholder: "роОройрпН роирпАрогрпНроЯ роХро╛ро▓ родрпКро▓рпИроирпЛроХрпНроХро┐ро▓рпН роЙро│рпНро│ро╡рпИ...",
    saveButton: "рокродро┐ро╡рпИ роЪрпЗрооро┐",
    addAnother: "рооро▒рпНро▒рпКройрпНро▒рпИ роЪрпЗро░рпН",
    emotionPatterns: "роЙрогро░рпНро╡рпБ роорпБро▒рпИроХро│рпН",
    chakraBalance: "роЪроХрпНроХро░ роЪроороиро┐ро▓рпИ",
    goalProgress: "роЗро▓роХрпНроХрпБ роорпБройрпНройрпЗро▒рпНро▒роорпН",
    personalizedWisdom: "родройро┐рокрпНрокропройро╛роХрпНроХрокрпНрокроЯрпНроЯ роЕро▒ро┐ро╡рпБ",
    noEntries: "роЗродрпБро╡ро░рпИ рокродро┐ро╡рпЗроЯрпБ роЙро│рпНро│рпАроЯрпБроХро│рпН роЗро▓рпНро▓рпИ",
    startWriting: "роЙроЩрпНроХро│рпН роирпБрогрпНрогро▒ро┐ро╡рпБроХро│рпИ роЗроЩрпНроХрпЗ рокро╛ро░рпНроХрпНроХ роОро┤рпБрод родрпКроЯроЩрпНроХрпБроЩрпНроХро│рпН"
  }
};

export default function Journal() {
  const { user } = useAuth();
  const [activeTab, setActiveTab] = useState("general");
  const [journalContent, setJournalContent] = useState("");
  const [gratitude, setGratitude] = useState<string[]>(["", "", ""]);
  const [affirmation, setAffirmation] = useState("");
  const [shortTermGoals, setShortTermGoals] = useState<string[]>(["", "", ""]);
  const [longTermVision, setLongTermVision] = useState("");
  const [language, setLanguage] = useState("english");
  const [isVoiceActive, setIsVoiceActive] = useState(false);
  const queryClient = useQueryClient();
  const { toast } = useToast();
  
  // Fetch user's journal entries
  const { data: journalEntries, isLoading } = useQuery({
    queryKey: [`/api/users/${user?.id}/journal-entries`],
    enabled: !!user,
  });
  
  // Mutation for creating a new journal entry
  const createJournalMutation = useMutation({
    mutationFn: async () => {
      // Filter out empty strings from arrays
      const filteredGratitude = gratitude.filter(item => item.trim() !== "");
      const filteredShortTermGoals = shortTermGoals.filter(item => item.trim() !== "");
      
      const response = await apiRequest("POST", "/api/journal-entries", {
        userId: user?.id,
        content: journalContent,
        gratitude: filteredGratitude,
        affirmation,
        shortTermGoals: filteredShortTermGoals,
        longTermVision,
        language
      });
      return response.json();
    },
    onSuccess: () => {
      // Invalidate and refetch journal entries
      queryClient.invalidateQueries({ queryKey: [`/api/users/${user?.id}/journal-entries`] });
      
      // Reset all fields
      setJournalContent("");
      setGratitude(["", "", ""]);
      setAffirmation("");
      setShortTermGoals(["", "", ""]);
      setLongTermVision("");
      
      // No toast notification - save silently for better user experience
    },
    onError: (error) => {
      // Only show notification on errors
      toast({
        title: "Error",
        description: "Failed to save your journal entry. Please try again.",
        variant: "destructive",
      });
    }
  });
  
  // Handle form submission
  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    // Check if any field has content
    const hasContent = 
      journalContent.trim() !== "" || 
      gratitude.some(g => g.trim() !== "") ||
      affirmation.trim() !== "" ||
      shortTermGoals.some(g => g.trim() !== "") ||
      longTermVision.trim() !== "";
    
    if (!hasContent) {
      toast({
        title: "Empty Journal",
        description: "Please fill at least one section of your journal before saving.",
        variant: "destructive",
      });
      return;
    }
    
    createJournalMutation.mutate();
  };
  
  // Toggle voice journaling
  const toggleVoiceJournaling = () => {
    // This would implement the actual voice recording functionality
    // using the browser's WebSpeech API or a similar solution
    setIsVoiceActive(!isVoiceActive);
    
    toast({
      title: isVoiceActive ? "Voice Recording Stopped" : "Voice Recording Started",
      description: isVoiceActive 
        ? "Your recording has been processed." 
        : "Speak clearly to record your journal entry.",
    });
  };
  
  // Format date for display
  const formatDate = (dateString: string) => {
    try {
      return formatDistanceToNow(new Date(dateString), { addSuffix: true });
    } catch (e) {
      return "Invalid date";
    }
  };
  
  // Update gratitude list items
  const updateGratitude = (index: number, value: string) => {
    const newGratitude = [...gratitude];
    newGratitude[index] = value;
    setGratitude(newGratitude);
  };
  
  // Update short-term goals list items
  const updateShortTermGoal = (index: number, value: string) => {
    const newGoals = [...shortTermGoals];
    newGoals[index] = value;
    setShortTermGoals(newGoals);
  };
  
  // Add new gratitude item
  const addGratitudeItem = () => {
    setGratitude([...gratitude, ""]);
  };
  
  // Remove gratitude item
  const removeGratitudeItem = (index: number) => {
    const newGratitude = [...gratitude];
    newGratitude.splice(index, 1);
    setGratitude(newGratitude);
  };
  
  // Add new short-term goal
  const addShortTermGoal = () => {
    setShortTermGoals([...shortTermGoals, ""]);
  };
  
  // Remove short-term goal
  const removeShortTermGoal = (index: number) => {
    const newGoals = [...shortTermGoals];
    newGoals.splice(index, 1);
    setShortTermGoals(newGoals);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-purple-50 pt-20 pb-16">
      <div className="container mx-auto px-4">
        <motion.div
          className="mb-8 text-center"
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
        >
          <h1 className="text-3xl md:text-4xl font-heading font-bold mb-2 bg-clip-text text-transparent bg-gradient-to-r from-[#483D8B] to-[#008080]">
            {TRANSLATIONS[language]?.title || "Daily Alignment Journal"}
          </h1>
          <p className="text-neutral-600 max-w-xl mx-auto">
            {TRANSLATIONS[language]?.subtitle || "Record your thoughts, emotions, and goals with AI-powered insights to guide your healing journey"}
          </p>
          
          {/* Language Selection */}
          <div className="mt-4 flex justify-center">
            <div className="max-w-xs w-full">
              <Select value={language} onValueChange={setLanguage}>
                <SelectTrigger className="w-full">
                  <SelectValue placeholder="Select Language" />
                </SelectTrigger>
                <SelectContent>
                  {LANGUAGES.map((lang) => (
                    <SelectItem key={lang.code} value={lang.code}>
                      <div className="flex items-center">
                        <Languages className="h-4 w-4 mr-2" />
                        {lang.name}
                      </div>
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          </div>
        </motion.div>
        
        <div className="grid grid-cols-1 md:grid-cols-12 gap-6">
          {/* Journal Entry Form */}
          <motion.div 
            className="md:col-span-8"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.1 }}
          >
            <Card className="shadow-md border-0">
              <CardHeader>
                <CardTitle>{TRANSLATIONS[language]?.newEntry || "New Journal Entry"}</CardTitle>
                <CardDescription>
                  {TRANSLATIONS[language]?.newEntryDescription || "Express your thoughts, emotions, and aspirations in this structured journal"}
                </CardDescription>
              </CardHeader>
              <form onSubmit={handleSubmit}>
                <CardContent>
                  <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
                    <TabsList className="grid grid-cols-5 mb-6">
                      <TabsTrigger value="general" className="flex items-center">
                        <MessageSquareText className="h-4 w-4 mr-2" />
                        <span className="hidden sm:inline">{TRANSLATIONS[language]?.general || "General"}</span>
                      </TabsTrigger>
                      <TabsTrigger value="gratitude" className="flex items-center">
                        <Star className="h-4 w-4 mr-2" />
                        <span className="hidden sm:inline">{TRANSLATIONS[language]?.gratitude || "Gratitude"}</span>
                      </TabsTrigger>
                      <TabsTrigger value="affirmation" className="flex items-center">
                        <Bookmark className="h-4 w-4 mr-2" />
                        <span className="hidden sm:inline">{TRANSLATIONS[language]?.affirmation || "Affirmation"}</span>
                      </TabsTrigger>
                      <TabsTrigger value="shortterm" className="flex items-center">
                        <ListTodo className="h-4 w-4 mr-2" />
                        <span className="hidden sm:inline">{TRANSLATIONS[language]?.shortTerm || "Short-Term"}</span>
                      </TabsTrigger>
                      <TabsTrigger value="longterm" className="flex items-center">
                        <Rocket className="h-4 w-4 mr-2" />
                        <span className="hidden sm:inline">{TRANSLATIONS[language]?.longTerm || "Long-Term"}</span>
                      </TabsTrigger>
                    </TabsList>
                    
                    <TabsContent value="general">
                      <div className="space-y-4">
                        <h3 className="text-lg font-medium text-neutral-800">{TRANSLATIONS[language]?.generalTitle || "ЁЯТн General Reflections"}</h3>
                        <p className="text-sm text-neutral-600">
                          {TRANSLATIONS[language]?.generalDescription || "Write freely about your thoughts, emotions, and experiences"}
                        </p>
                        <Textarea
                          placeholder={TRANSLATIONS[language]?.generalPlaceholder || "How are you feeling today? What's on your mind?"}
                          className="min-h-[200px] resize-none"
                          value={journalContent}
                          onChange={(e) => setJournalContent(e.target.value)}
                        />
                      </div>
                    </TabsContent>
                    
                    <TabsContent value="gratitude">
                      <div className="space-y-4">
                        <h3 className="text-lg font-medium text-neutral-800">{TRANSLATIONS[language]?.gratitudeTitle || "тЬи I am grateful for..."}</h3>
                        <p className="text-sm text-neutral-600">
                          {TRANSLATIONS[language]?.gratitudeDescription || "List things that brought you joy, peace, or inspiration today"}
                        </p>
                        
                        <div className="space-y-2">
                          {gratitude.map((item, index) => (
                            <div key={`gratitude-${index}`} className="flex gap-2">
                              <Input
                                placeholder={`${TRANSLATIONS[language]?.gratitudePlaceholder || "Gratitude"} ${index + 1}`}
                                value={item}
                                onChange={(e) => updateGratitude(index, e.target.value)}
                                className="flex-grow"
                              />
                              {gratitude.length > 1 && (
                                <Button 
                                  type="button" 
                                  variant="ghost" 
                                  size="icon"
                                  onClick={() => removeGratitudeItem(index)}
                                >
                                  <XCircle className="h-4 w-4 text-neutral-500" />
                                </Button>
                              )}
                            </div>
                          ))}
                          
                          <Button 
                            type="button" 
                            variant="outline" 
                            size="sm" 
                            onClick={addGratitudeItem}
                            className="mt-2"
                          >
                            <PlusCircle className="h-4 w-4 mr-2" />
                            {TRANSLATIONS[language]?.addAnother || "Add Another"}
                          </Button>
                        </div>
                      </div>
                    </TabsContent>
                    
                    <TabsContent value="affirmation">
                      <div className="space-y-4">
                        <h3 className="text-lg font-medium text-neutral-800">{TRANSLATIONS[language]?.affirmationTitle || "ЁЯМЯ Today's Affirmation"}</h3>
                        <p className="text-sm text-neutral-600">
                          {TRANSLATIONS[language]?.affirmationDescription || "Write a positive I AM statement to align your energy"}
                        </p>
                        <Input
                          placeholder={TRANSLATIONS[language]?.affirmationPlaceholder || "I am..."}
                          value={affirmation}
                          onChange={(e) => setAffirmation(e.target.value)}
                          className="w-full"
                        />
                      </div>
                    </TabsContent>
                    
                    <TabsContent value="shortterm">
                      <div className="space-y-4">
                        <h3 className="text-lg font-medium text-neutral-800">{TRANSLATIONS[language]?.shortTermTitle || "ЁЯОп Steps I will take today"}</h3>
                        <p className="text-sm text-neutral-600">
                          {TRANSLATIONS[language]?.shortTermDescription || "What key actions will move you forward today?"}
                        </p>
                        
                        <div className="space-y-2">
                          {shortTermGoals.map((goal, index) => (
                            <div key={`goal-${index}`} className="flex gap-2">
                              <Input
                                placeholder={`${TRANSLATIONS[language]?.shortTermPlaceholder || "Step"} ${index + 1}`}
                                value={goal}
                                onChange={(e) => updateShortTermGoal(index, e.target.value)}
                                className="flex-grow"
                              />
                              {shortTermGoals.length > 1 && (
                                <Button 
                                  type="button" 
                                  variant="ghost" 
                                  size="icon"
                                  onClick={() => removeShortTermGoal(index)}
                                >
                                  <XCircle className="h-4 w-4 text-neutral-500" />
                                </Button>
                              )}
                            </div>
                          ))}
                          
                          <Button 
                            type="button" 
                            variant="outline" 
                            size="sm" 
                            onClick={addShortTermGoal}
                            className="mt-2"
                          >
                            <PlusCircle className="h-4 w-4 mr-2" />
                            {TRANSLATIONS[language]?.addAnother || "Add Another"}
                          </Button>
                        </div>
                      </div>
                    </TabsContent>
                    
                    <TabsContent value="longterm">
                      <div className="space-y-4">
                        <h3 className="text-lg font-medium text-neutral-800">{TRANSLATIONS[language]?.longTermTitle || "ЁЯЪА Steps toward my long-term goals"}</h3>
                        <p className="text-sm text-neutral-600">
                          {TRANSLATIONS[language]?.longTermDescription || "What aligned actions or habits will move you toward your vision?"}
                        </p>
                        <Textarea
                          placeholder={TRANSLATIONS[language]?.longTermPlaceholder || "My long-term vision includes..."}
                          className="min-h-[150px] resize-none"
                          value={longTermVision}
                          onChange={(e) => setLongTermVision(e.target.value)}
                        />
                      </div>
                    </TabsContent>
                  </Tabs>
                </CardContent>
                
                <CardFooter className="flex justify-between">
                  <Button 
                    type="button" 
                    variant={isVoiceActive ? "destructive" : "outline"}
                    onClick={toggleVoiceJournaling}
                  >
                    {isVoiceActive ? (
                      <>
                        <MicOff className="h-4 w-4 mr-1" />
                        <span>Stop Recording</span>
                      </>
                    ) : (
                      <>
                        <Mic className="h-4 w-4 mr-1" />
                        <span>Voice Journal</span>
                      </>
                    )}
                  </Button>
                  <Button 
                    type="submit"
                    className="bg-gradient-to-r from-[#483D8B] to-[#008080] text-white hover:opacity-90"
                    disabled={createJournalMutation.isPending}
                  >
                    {createJournalMutation.isPending ? "Saving..." : TRANSLATIONS[language]?.saveButton || "Save Entry"}
                  </Button>
                </CardFooter>
              </form>
            </Card>
          </motion.div>
          
          {/* Journal Insights Panel */}
          <motion.div 
            className="md:col-span-4"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.2 }}
          >
            <Card className="shadow-md border-0">
              <CardHeader>
                <CardTitle>{TRANSLATIONS[language]?.insightsTitle || "Journal Insights"}</CardTitle>
                <CardDescription>
                  {TRANSLATIONS[language]?.insightsDescription || "AI-generated insights from your journal entries"}
                </CardDescription>
              </CardHeader>
              <CardContent>
                {isLoading ? (
                  <div className="flex justify-center py-8">
                    <div className="h-8 w-8 rounded-full border-4 border-t-transparent border-[#483D8B] animate-spin"></div>
                  </div>
                ) : journalEntries && Array.isArray(journalEntries) && journalEntries.length > 0 ? (
                  <div className="space-y-6">
                    {/* Emotion Tracking */}
                    <div className="bg-rose-50 p-4 rounded-lg border border-rose-100">
                      <div className="flex items-center mb-3">
                        <Sparkles className="h-5 w-5 mr-2 text-rose-600" />
                        <span className="font-medium text-rose-800">{TRANSLATIONS[language]?.emotionPatterns || "Emotion Patterns"}</span>
                      </div>
                      <div className="flex flex-wrap gap-2 mb-2">
                        <Badge variant="secondary" className="bg-[#FF69B4]/10 text-[#FF69B4] hover:bg-[#FF69B4]/20">
                          {language === "english" ? "joy" : language === "hindi" ? "рдЖрдирдВрдж" : language === "tamil" ? "роороХро┐ро┤рпНроЪрпНроЪро┐" : "joy"}
                        </Badge>
                        <Badge variant="secondary" className="bg-[#FF69B4]/10 text-[#FF69B4] hover:bg-[#FF69B4]/20">
                          {language === "english" ? "gratitude" : language === "hindi" ? "рдХреГрддрдЬреНрдЮрддрд╛" : language === "tamil" ? "роиройрпНро▒ро┐" : "gratitude"}
                        </Badge>
                        <Badge variant="secondary" className="bg-[#FF69B4]/10 text-[#FF69B4] hover:bg-[#FF69B4]/20">
                          {language === "english" ? "reflection" : language === "hindi" ? "рдЪрд┐рдВрддрди" : language === "tamil" ? "рокро┐ро░родро┐рокро▓ро┐рокрпНрокрпБ" : "reflection"}
                        </Badge>
                      </div>
                      <p className="text-sm text-rose-700">
                        {language === "english" 
                          ? "Your emotional state has been positive recently, with a focus on reflection and gratitude."
                          : language === "hindi" 
                            ? "рдЖрдкрдХреА рднрд╛рд╡рдирд╛рддреНрдордХ рд╕реНрдерд┐рддрд┐ рд╣рд╛рд▓ рд╣реА рдореЗрдВ рд╕рдХрд╛рд░рд╛рддреНрдордХ рд░рд╣реА рд╣реИ, рдЬрд┐рд╕рдореЗрдВ рдЪрд┐рдВрддрди рдФрд░ рдХреГрддрдЬреНрдЮрддрд╛ рдкрд░ рдзреНрдпрд╛рди рдХреЗрдВрджреНрд░рд┐рдд рд╣реИред"
                            : language === "tamil"
                              ? "роЙроЩрпНроХро│рпН роЙрогро░рпНроЪрпНроЪро┐ роиро┐ро▓рпИ роЪроорпАрокродрпНродро┐ро▓рпН роирпЗро░рпНрооро▒рпИропро╛роХ роЗро░рпБроирпНродрпБро│рпНро│родрпБ, рокро┐ро░родро┐рокро▓ро┐рокрпНрокрпБ рооро▒рпНро▒рпБроорпН роиройрпНро▒ро┐ропрпБрогро░рпНро╡рпИ роорпИропрооро╛роХроХрпН роХрпКрогрпНроЯродрпБ."
                              : "Your emotional state has been positive recently, with a focus on reflection and gratitude."}
                      </p>
                    </div>
                    
                    {/* Chakra Focus */}
                    <div className="bg-indigo-50 p-4 rounded-lg border border-indigo-100">
                      <div className="flex items-center mb-3">
                        <Sparkles className="h-5 w-5 mr-2 text-indigo-600" />
                        <span className="font-medium text-indigo-800">{TRANSLATIONS[language]?.chakraBalance || "Chakra Balance"}</span>
                      </div>
                      <div className="flex flex-wrap gap-2 mb-2">
                        <Badge variant="secondary" className="bg-[#483D8B]/10 text-[#483D8B] hover:bg-[#483D8B]/20">
                          {language === "english" ? "throat chakra" : language === "hindi" ? "рдХрдВрда рдЪрдХреНрд░" : language === "tamil" ? "родрпКрогрпНроЯрпИ роЪроХрпНроХро░роорпН" : "throat chakra"}
                        </Badge>
                        <Badge variant="secondary" className="bg-[#483D8B]/10 text-[#483D8B] hover:bg-[#483D8B]/20">
                          {language === "english" ? "heart chakra" : language === "hindi" ? "рд╣реГрджрдп рдЪрдХреНрд░" : language === "tamil" ? "роЗродроп роЪроХрпНроХро░роорпН" : "heart chakra"}
                        </Badge>
                      </div>
                      <p className="text-sm text-indigo-700">
                        {language === "english" 
                          ? "Your journal entries show focus on expressing yourself (throat chakra) and processing emotions (heart chakra)."
                          : language === "hindi" 
                            ? "рдЖрдкрдХреА рдЬрд░реНрдирд▓ рдкреНрд░рд╡рд┐рд╖реНрдЯрд┐рдпрд╛рдВ рд╕реНрд╡рдпрдВ рдХреЛ рд╡реНрдпрдХреНрдд рдХрд░рдиреЗ (рдХрдВрда рдЪрдХреНрд░) рдФрд░ рднрд╛рд╡рдирд╛рдУрдВ рдХреЛ рд╕рдВрд╕рд╛рдзрд┐рдд рдХрд░рдиреЗ (рд╣реГрджрдп рдЪрдХреНрд░) рдкрд░ рдзреНрдпрд╛рди рдХреЗрдВрджреНрд░рд┐рдд рдХрд░рддреА рд╣реИрдВред"
                            : language === "tamil"
                              ? "роЙроЩрпНроХро│рпН рокродро┐ро╡рпЗроЯрпБ роЙро│рпНро│рпАроЯрпБроХро│рпН роЙроЩрпНроХро│рпИ ро╡рпЖро│ро┐рокрпНрокроЯрпБродрпНродрпБро╡родро┐ро▓рпН (родрпКрогрпНроЯрпИ роЪроХрпНроХро░роорпН) рооро▒рпНро▒рпБроорпН роЙрогро░рпНро╡рпБроХро│рпИ роЪрпЖропро▓ро╛роХрпНроХрпБро╡родро┐ро▓рпН (роЗродроп роЪроХрпНроХро░роорпН) роХро╡ройроорпН роЪрпЖро▓рпБродрпНродрпБроХро┐ройрпНро▒рой."
                              : "Your journal entries show focus on expressing yourself (throat chakra) and processing emotions (heart chakra)."}
                      </p>
                    </div>
                    
                    {/* Goal Progress */}
                    <div className="bg-emerald-50 p-4 rounded-lg border border-emerald-100">
                      <div className="flex items-center mb-3">
                        <Target className="h-5 w-5 mr-2 text-emerald-600" />
                        <span className="font-medium text-emerald-800">{TRANSLATIONS[language]?.goalProgress || "Goal Progress"}</span>
                      </div>
                      <ul className="space-y-2 text-sm text-emerald-700">
                        <li className="flex items-start">
                          <div className="w-2 h-2 rounded-full bg-emerald-600 mr-2 mt-1.5"></div>
                          <span>
                            {language === "english" 
                              ? "You're making steady progress on your meditation practice consistency"
                              : language === "hindi" 
                                ? "рдЖрдк рдЕрдкрдиреЗ рдзреНрдпрд╛рди рдЕрднреНрдпрд╛рд╕ рдХреА рдирд┐рд░рдВрддрд░рддрд╛ рдкрд░ рд╕реНрдерд┐рд░ рдкреНрд░рдЧрддрд┐ рдХрд░ рд░рд╣реЗ рд╣реИрдВ"
                                : language === "tamil"
                                  ? "роирпАроЩрпНроХро│рпН роЙроЩрпНроХро│рпН родро┐ропро╛рой рокропро┐ро▒рпНроЪро┐ роиро┐ро▓рпИродрпНродройрпНроорпИропро┐ро▓рпН роиро┐ро▓рпИропро╛рой роорпБройрпНройрпЗро▒рпНро▒роорпН роЕроЯрпИроХро┐ро▒рпАро░рпНроХро│рпН"
                                  : "You're making steady progress on your meditation practice consistency"}
                          </span>
                        </li>
                        <li className="flex items-start">
                          <div className="w-2 h-2 rounded-full bg-emerald-600 mr-2 mt-1.5"></div>
                          <span>
                            {language === "english" 
                              ? "Focus on completing one short-term goal each day for better results"
                              : language === "hindi" 
                                ? "рдмреЗрд╣рддрд░ рдкрд░рд┐рдгрд╛рдореЛрдВ рдХреЗ рд▓рд┐рдП рдкреНрд░рддрд┐рджрд┐рди рдПрдХ рдЕрд▓реНрдкрдХрд╛рд▓рд┐рдХ рд▓рдХреНрд╖реНрдп рдХреЛ рдкреВрд░рд╛ рдХрд░рдиреЗ рдкрд░ рдзреНрдпрд╛рди рджреЗрдВ"
                                : language === "tamil"
                                  ? "роЪро┐ро▒роирпНрод роорпБроЯро┐ро╡рпБроХро│рпБроХрпНроХрпБ роТро╡рпНро╡рпКро░рпБ роиро╛ро│рпБроорпН роТро░рпБ роХрпБро▒рпБроХро┐роп роХро╛ро▓ роЗро▓роХрпНроХрпИ роиро┐ро▒рпИро╡рпБ роЪрпЖропрпНро╡родро┐ро▓рпН роХро╡ройроорпН роЪрпЖро▓рпБродрпНродрпБроЩрпНроХро│рпН"
                                  : "Focus on completing one short-term goal each day for better results"}
                          </span>
                        </li>
                      </ul>
                    </div>
                    
                    {/* Wisdom & Advice */}
                    <div className="bg-amber-50 p-4 rounded-lg border border-amber-100">
                      <div className="flex items-center mb-3">
                        <Sparkles className="h-5 w-5 mr-2 text-amber-600" />
                        <span className="font-medium text-amber-800">{TRANSLATIONS[language]?.personalizedWisdom || "Personalized Wisdom"}</span>
                      </div>
                      <p className="text-sm text-amber-700 mb-2 italic">
                        {language === "english" 
                          ? "\"Your consistent journaling practice is building self-awareness. Consider adding a 5-minute meditation before journaling to deepen insights.\""
                          : language === "hindi" 
                            ? "\"рдЖрдкрдХрд╛ рдирд┐рд░рдВрддрд░ рдЬрд░реНрдирд▓рд┐рдВрдЧ рдЕрднреНрдпрд╛рд╕ рдЖрддреНрдо-рдЬрд╛рдЧрд░реВрдХрддрд╛ рдХрд╛ рдирд┐рд░реНрдорд╛рдг рдХрд░ рд░рд╣рд╛ рд╣реИред рдЕрдВрддрд░реНрджреГрд╖реНрдЯрд┐ рдХреЛ рдЧрд╣рд░рд╛ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдЬрд░реНрдирд▓рд┐рдВрдЧ рд╕реЗ рдкрд╣рд▓реЗ 5-рдорд┐рдирдЯ рдХрд╛ рдзреНрдпрд╛рди рдЬреЛрдбрд╝рдиреЗ рдкрд░ рд╡рд┐рдЪрд╛рд░ рдХрд░реЗрдВред\""
                            : language === "tamil"
                              ? "\"роЙроЩрпНроХро│рпН родрпКроЯро░рпНроЪрпНроЪро┐ропро╛рой рокродро┐ро╡рпБ роЪрпЖропрпНропрпБроорпН рокропро┐ро▒рпНроЪро┐ роЪрпБроп ро╡ро┐ро┤ро┐рокрпНрокрпБрогро░рпНро╡рпИ роЙро░рпБро╡ро╛роХрпНроХрпБроХро┐ро▒родрпБ. рокродро┐ро╡рпБ роЪрпЖропрпНро╡родро▒рпНроХрпБ роорпБройрпН 5-роиро┐рооро┐роЯ родро┐ропро╛ройродрпНродрпИроЪрпН роЪрпЗро░рпНродрпНродрпБ роирпБрогрпНрогро▒ро┐ро╡рпБроХро│рпИ роЖро┤рокрпНрокроЯрпБродрпНрод роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН.\""
                              : "\"Your consistent journaling practice is building self-awareness. Consider adding a 5-minute meditation before journaling to deepen insights.\""}
                      </p>
                    </div>
                  </div>
                ) : (
                  <div className="text-center py-8 text-neutral-500">
                    <BookOpen className="h-12 w-12 mx-auto mb-3 opacity-30" />
                    <p>No journal entries yet</p>
                    <p className="text-sm mt-1">Start writing to see your insights here</p>
                  </div>
                )}
              </CardContent>
            </Card>
          </motion.div>
        </div>
      </div>
    </div>
  );
}
