import { useEffect, useState } from "react";
import { motion } from "framer-motion";
import { useQuery } from "@tanstack/react-query";
import { useAuth } from "@/hooks/use-auth";
import { useLocation } from "wouter";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Separator } from "@/components/ui/separator";
import { Download, FileText, ArrowLeft, MessageCircle } from "lucide-react";
import { chakras, getChakraStatus, getOverallChakraBalance, getChakraRecommendations } from "@/lib/chakras";
import { getCoachRecommendations } from "@/lib/chakraCoaching";
import { apiRequest } from "@/lib/queryClient";
import { toast } from "@/hooks/use-toast";

// Helper function to format date
const formatDate = (date: Date) => {
  return new Intl.DateTimeFormat('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
  }).format(date);
};

export default function ChakraReport() {
  const { user } = useAuth();
  const [, setLocation] = useLocation();
  const [loadingPdf, setLoadingPdf] = useState(false);
  
  // Function to generate and download PDF report
  const generatePdfReport = () => {
    setLoadingPdf(true);
    
    try {
      // Helper function to safely handle arrays or strings
      const safeJoin = (arr: any, separator: string) => {
        if (Array.isArray(arr)) {
          return arr.join(separator);
        }
        return String(arr || '');
      };
      
      // Generate a text report
      const reportText = `
# CHAKRA ASSESSMENT REPORT
Generated on: ${formatDate(new Date())}

## OVERVIEW
Overall Balance: ${overallBalance.status} (${overallBalance.score}/10)
${overallBalance.description}

## DETAILED CHAKRA ANALYSIS
${chakras.map(chakra => {
  const status = getChakraStatus(chakraValues[chakra.key as keyof typeof chakraValues]);
  return `
### ${chakra.name.toUpperCase()} (${chakra.sanskritName})
Current Level: ${chakraValues[chakra.key as keyof typeof chakraValues]}/10 - ${status.status}

${status.description}

Physical Associations: ${safeJoin(chakra.physicalAssociations, ', ')}
Psychological Associations: ${safeJoin(chakra.psychologicalAssociations, ', ')}

${status.level === 'balanced' 
  ? `Balanced Traits: ${safeJoin(chakra.balancedTraits, ', ')}`
  : status.level === 'underactive'
    ? `Underactive Signs: ${safeJoin(chakra.underactiveSymptoms, ', ')}`
    : `Overactive Signs: ${safeJoin(chakra.overactiveSymptoms, ', ')}`
}

Healing Recommendations:
- ${Array.isArray(chakra.healingPractices) && chakra.healingPractices.length > 0 
  ? chakra.healingPractices.slice(0, 3).join('\n- ')
  : 'No specific recommendations available'}
`;
}).join('\n')}

## PERSONALIZED CHAKRA HEALING RECOMMENDATIONS

${Object.entries(recommendations).map(([chakra, recs]) => {
  const chakraInfo = chakras.find(c => c.key === chakra);
  return `
### For ${chakraInfo?.name || chakra} Chakra:
${Array.isArray(recs) ? recs.join('\n') : String(recs || '')}
`;
}).join('\n')}

This report was generated by SoulSync's AI-powered chakra assessment system. The recommendations and analysis are based on your self-reported chakra values and should be considered as supportive guidance for your healing journey. For professional medical or psychological assistance, please consult with qualified healthcare providers.

© SoulSync ${new Date().getFullYear()}
      `;
      
      // Create a blob and download link
      const blob = new Blob([reportText], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `chakra-report-${new Date().toISOString().slice(0, 10)}.txt`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
      
      toast({
        title: "Report Generated",
        description: "Your chakra report has been downloaded as a text file.",
      });
    } catch (error) {
      console.error("Error generating report:", error);
      toast({
        title: "Error Generating Report",
        description: "There was a problem creating your report. Please try again.",
        variant: "destructive",
      });
    } finally {
      setLoadingPdf(false);
    }
  };
  
  // Fetch user's chakra profile
  const { data: chakraProfile, isLoading: isLoadingChakraProfile } = useQuery({
    queryKey: ['/api/users', user?.id, 'chakra-profile'],
    queryFn: async () => {
      if (!user) return null;
      try {
        const res = await fetch(`/api/users/${user.id}/chakra-profile`);
        if (!res.ok) {
          if (res.status === 404) {
            return null;
          }
          throw new Error('Failed to fetch chakra profile');
        }
        return await res.json();
      } catch (error) {
        console.error('Error fetching chakra profile:', error);
        return null;
      }
    },
    enabled: !!user,
  });
  
  // Prepare chakra values from the profile
  const chakraValues = chakraProfile ? {
    crown: chakraProfile.crownChakra,
    thirdEye: chakraProfile.thirdEyeChakra,
    throat: chakraProfile.throatChakra,
    heart: chakraProfile.heartChakra,
    solarPlexus: chakraProfile.solarPlexusChakra,
    sacral: chakraProfile.sacralChakra,
    root: chakraProfile.rootChakra
  } : {
    crown: 5,
    thirdEye: 5,
    throat: 5,
    heart: 5,
    solarPlexus: 5,
    sacral: 5,
    root: 5
  };

  // Get overall chakra balance assessment
  const overallBalance = getOverallChakraBalance(chakraValues);
  
  // Get personalized recommendations
  const recommendations = getChakraRecommendations(chakraValues);
  
  // Get coach recommendations based on chakra assessment
  const coachingRecommendations = getCoachRecommendations(chakraValues);

  // Create a function to generate AI-powered chakra report when OpenAI is integrated
  const generateDetailedReport = async () => {
    setLoadingPdf(true);
    // In a real implementation with OpenAI key, this would make an API call
    // to generate a detailed report using AI
    
    // Helper function to safely handle arrays or strings
    const safeJoin = (arr: any, separator: string) => {
      if (Array.isArray(arr)) {
        return arr.join(separator);
      }
      return String(arr || '');
    };
    
    // For now simulate time with setTimeout
    setTimeout(() => {
      // Create a simple text report
      const reportText = `
# SOULSYNC CHAKRA ASSESSMENT REPORT
Generated for: ${user?.name || 'User'}
Date: ${formatDate(new Date())}

## OVERALL CHAKRA BALANCE
Current Balance Level: ${overallBalance.status}
Balance Score: ${overallBalance.score}/10

${overallBalance.description}

## INDIVIDUAL CHAKRA ANALYSIS

${chakras.map(chakra => {
  const status = getChakraStatus(chakraValues[chakra.key]);
  return `
### ${chakra.name.toUpperCase()} (${chakra.sanskritName})
Current Level: ${chakraValues[chakra.key]}/10 - ${status.status}

${status.description}

Physical Associations: ${safeJoin(chakra.physicalAssociations, ', ')}
Psychological Associations: ${safeJoin(chakra.psychologicalAssociations, ', ')}

${status.level === 'balanced' 
  ? `Balanced Traits: ${safeJoin(chakra.balancedTraits, ', ')}`
  : status.level === 'underactive'
    ? `Underactive Signs: ${safeJoin(chakra.underactiveSymptoms, ', ')}`
    : `Overactive Signs: ${safeJoin(chakra.overactiveSymptoms, ', ')}`
}

Healing Recommendations:
- ${Array.isArray(chakra.healingPractices) && chakra.healingPractices.length > 0 
  ? chakra.healingPractices.slice(0, 3).join('\n- ')
  : 'No specific recommendations available'}
`;
}).join('\n')}

## PERSONALIZED CHAKRA HEALING RECOMMENDATIONS

${Object.entries(recommendations).map(([chakra, recs]) => {
  const chakraInfo = chakras.find(c => c.key === chakra);
  return `
### For ${chakraInfo?.name || chakra} Chakra:
${Array.isArray(recs) ? recs.join('\n') : String(recs || '')}
`;
}).join('\n')}

This report was generated by SoulSync's AI-powered chakra assessment system. The recommendations and analysis are based on your self-reported chakra values and should be considered as supportive guidance for your healing journey. For professional medical or psychological assistance, please consult with qualified healthcare providers.

© SoulSync ${new Date().getFullYear()}
      `;
      
      // Create a blob and download link
      const blob = new Blob([reportText], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `chakra-report-${new Date().toISOString().slice(0, 10)}.txt`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
      
      toast({
        title: "Report Generated",
        description: "Your detailed chakra assessment report has been downloaded.",
      });
      
      setLoadingPdf(false);
    }, 2000);
  };
  
  if (!user) {
    return null;
  }
  
  if (isLoadingChakraProfile) {
    return (
      <div className="min-h-screen bg-neutral-50 pt-20 pb-16 flex items-center justify-center">
        <div className="h-12 w-12 rounded-full border-4 border-t-transparent border-[#483D8B] animate-spin"></div>
      </div>
    );
  }
  
  if (!chakraProfile) {
    return (
      <div className="min-h-screen bg-neutral-50 pt-20 pb-16">
        <div className="container mx-auto px-4 max-w-4xl">
          <Button 
            variant="ghost" 
            className="mb-6" 
            onClick={() => setLocation('/')}
          >
            <ArrowLeft className="w-4 h-4 mr-2" />
            Back to Dashboard
          </Button>
          
          <Card className="w-full">
            <CardContent className="p-8 text-center">
              <div className="mb-4 inline-flex items-center justify-center w-16 h-16 rounded-full bg-amber-100 text-amber-600">
                <FileText className="w-8 h-8" />
              </div>
              <h2 className="text-2xl font-heading font-bold mb-2">No Chakra Assessment Found</h2>
              <p className="text-neutral-600 mb-6">
                You need to complete a chakra assessment first before generating a report.
              </p>
              <Button onClick={() => setLocation('/dashboard')}>
                Go to Chakra Assessment
              </Button>
            </CardContent>
          </Card>
        </div>
      </div>
    );
  }
  
  return (
    <div className="min-h-screen bg-neutral-50 pt-20 pb-16">
      <div className="container mx-auto px-4 max-w-4xl">
        <Button 
          variant="ghost" 
          className="mb-6" 
          onClick={() => setLocation('/')}
        >
          <ArrowLeft className="w-4 h-4 mr-2" />
          Back to Dashboard
        </Button>
        
        <motion.div
          className="text-center mb-8"
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
        >
          <h1 className="text-3xl font-heading font-bold mb-2 bg-clip-text text-transparent bg-gradient-to-r from-[#483D8B] to-[#008080]">
            Your Chakra Report
          </h1>
          <p className="text-neutral-600 max-w-xl mx-auto">
            Access your comprehensive chakra assessment, detailed analysis, and personalized healing recommendations.
          </p>
        </motion.div>
        
        <Card className="mb-6">
          <CardHeader className="pb-0">
            <CardTitle>Report Overview</CardTitle>
            <CardDescription>
              Key insights from your chakra assessment
            </CardDescription>
          </CardHeader>
          <CardContent className="pt-6">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
              <div className="p-4 bg-neutral-100 rounded-lg text-center">
                <h3 className="text-lg font-medium mb-1">Overall Balance</h3>
                <p className="text-2xl font-bold text-[#483D8B]">{overallBalance.status}</p>
                <p className="text-sm text-neutral-500">Score: {overallBalance.score}/10</p>
              </div>
              
              <div className="p-4 bg-neutral-100 rounded-lg text-center">
                <h3 className="text-lg font-medium mb-1">Strongest Chakra</h3>
                {(() => {
                  const entries = Object.entries(chakraValues);
                  const [strongest] = [...entries].sort((a, b) => b[1] - a[1])[0];
                  const chakraInfo = chakras.find(c => c.key === strongest);
                  return (
                    <>
                      <p className="text-2xl font-bold" style={{ color: chakraInfo?.color }}>{chakraInfo?.name}</p>
                      <p className="text-sm text-neutral-500">Value: {chakraValues[strongest]}/10</p>
                    </>
                  );
                })()}
              </div>
              
              <div className="p-4 bg-neutral-100 rounded-lg text-center">
                <h3 className="text-lg font-medium mb-1">For Attention</h3>
                {(() => {
                  const entries = Object.entries(chakraValues);
                  // Find the chakra furthest from balanced (5)
                  const [needsAttention] = [...entries].sort((a, b) => 
                    Math.abs(b[1] - 5) - Math.abs(a[1] - 5)
                  )[0];
                  const chakraInfo = chakras.find(c => c.key === needsAttention);
                  return (
                    <>
                      <p className="text-2xl font-bold" style={{ color: chakraInfo?.color }}>{chakraInfo?.name}</p>
                      <p className="text-sm text-neutral-500">Value: {chakraValues[needsAttention]}/10</p>
                    </>
                  );
                })()}
              </div>
            </div>
            
            <Separator className="my-6" />
            
            <div className="mb-6">
              <h3 className="text-lg font-medium mb-3">Chakra Balance Visualization</h3>
              <div className="flex flex-wrap items-center justify-center gap-3 mb-2">
                {chakras.map(chakra => (
                  <div 
                    key={chakra.key} 
                    className="text-center"
                  >
                    <div 
                      className="w-8 h-8 md:w-12 md:h-12 mx-auto rounded-full mb-2 flex items-center justify-center text-white font-bold text-xs"
                      style={{ 
                        backgroundColor: chakra.color,
                        transform: `scale(${0.7 + (chakraValues[chakra.key] / 10) * 0.3})`,
                        boxShadow: `0 0 ${chakraValues[chakra.key] * 2}px ${chakra.color}`,
                        transition: 'all 0.3s ease'
                      }}
                    >
                      {chakraValues[chakra.key]}
                    </div>
                    <p className="text-xs font-medium" style={{ color: chakra.color }}>
                      {chakra.name.split(' ')[0]}
                    </p>
                  </div>
                ))}
              </div>
            </div>
          </CardContent>
          <CardFooter className="flex flex-col sm:flex-row gap-3">
            <Button 
              className="w-full bg-[#483D8B] hover:bg-opacity-90"
              onClick={generateDetailedReport}
              disabled={loadingPdf}
            >
              {loadingPdf ? (
                <>
                  <div className="w-4 h-4 mr-2 rounded-full border-2 border-t-transparent border-white animate-spin"></div>
                  Generating Report...
                </>
              ) : (
                <>
                  <Download className="w-4 h-4 mr-2" />
                  Download Full Report
                </>
              )}
            </Button>
            <Button 
              variant="outline" 
              className="w-full"
              onClick={() => setLocation('/chakra-assessment')}
            >
              Update Your Assessment
            </Button>
          </CardFooter>
        </Card>
        
        <Tabs defaultValue="chakras" className="w-full">
          <TabsList className="grid grid-cols-3 mb-6">
            <TabsTrigger value="chakras">Chakra Details</TabsTrigger>
            <TabsTrigger value="recommendations">Healing Recommendations</TabsTrigger>
            <TabsTrigger value="coaching">AI Coach Guidance</TabsTrigger>
          </TabsList>
          
          <TabsContent value="chakras" className="space-y-6">
            {chakras.map(chakra => {
              const status = getChakraStatus(chakraValues[chakra.key]);
              return (
                <Card key={chakra.key}>
                  <CardHeader className="pb-3 border-l-4" style={{ borderColor: chakra.color }}>
                    <CardTitle className="flex items-center">
                      <div 
                        className="w-6 h-6 rounded-full mr-3"
                        style={{ backgroundColor: chakra.color }}
                      ></div>
                      {chakra.name} ({chakra.sanskritName})
                    </CardTitle>
                    <CardDescription>
                      Current Status: <span className="font-medium">{status.status}</span> - Value: {chakraValues[chakra.key]}/10
                    </CardDescription>
                  </CardHeader>
                  <CardContent className="pt-0">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <p className="text-neutral-700 mb-3">{status.description}</p>
                        
                        <h4 className="text-sm font-semibold mb-2">Physical Associations</h4>
                        <div className="flex flex-wrap gap-1 mb-3">
                          {Array.isArray(chakra.physicalAssociations) ? chakra.physicalAssociations.map((item, index) => (
                            <span key={index} className="text-xs bg-neutral-100 px-2 py-1 rounded-full">
                              {item}
                            </span>
                          )) : (
                            <span className="text-xs bg-neutral-100 px-2 py-1 rounded-full">{chakra.physicalAssociations}</span>
                          )}
                        </div>
                      </div>
                      
                      <div>
                        <h4 className="text-sm font-semibold mb-2">Characteristics</h4>
                        <div className="text-sm space-y-2 mb-3">
                          {status.level === "balanced" ? (
                            <div>
                              <p className="font-medium text-green-600 mb-1">Balanced Signs:</p>
                              <ul className="list-disc pl-5 space-y-1">
                                {Array.isArray(chakra.balancedTraits) ? chakra.balancedTraits.slice(0, 3).map((trait, idx) => (
                                  <li key={idx}>{trait}</li>
                                )) : (
                                  <li>{String(chakra.balancedTraits)}</li>
                                )}
                              </ul>
                            </div>
                          ) : status.level === "underactive" ? (
                            <div>
                              <p className="font-medium text-amber-600 mb-1">Underactive Signs:</p>
                              <ul className="list-disc pl-5 space-y-1">
                                {Array.isArray(chakra.underactiveSymptoms) ? chakra.underactiveSymptoms.slice(0, 3).map((trait, idx) => (
                                  <li key={idx}>{trait}</li>
                                )) : (
                                  <li>{String(chakra.underactiveSymptoms)}</li>
                                )}
                              </ul>
                            </div>
                          ) : (
                            <div>
                              <p className="font-medium text-red-600 mb-1">Overactive Signs:</p>
                              <ul className="list-disc pl-5 space-y-1">
                                {Array.isArray(chakra.overactiveSymptoms) ? chakra.overactiveSymptoms.slice(0, 3).map((trait, idx) => (
                                  <li key={idx}>{trait}</li>
                                )) : (
                                  <li>{String(chakra.overactiveSymptoms)}</li>
                                )}
                              </ul>
                            </div>
                          )}
                        </div>
                        
                        <h4 className="text-sm font-semibold mb-2">Healing Practices</h4>
                        <ul className="list-disc pl-5 space-y-1 text-sm">
                          {Array.isArray(chakra.healingPractices) ? chakra.healingPractices.slice(0, 3).map((practice, idx) => (
                            <li key={idx}>{practice}</li>
                          )) : (
                            <li>{String(chakra.healingPractices)}</li>
                          )}
                        </ul>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              );
            })}
          </TabsContent>
          
          <TabsContent value="recommendations" className="space-y-6">
            {Object.entries(recommendations).map(([chakraKey, recs]) => {
              const chakraInfo = chakras.find(c => c.key === chakraKey);
              if (!chakraInfo || !Array.isArray(recs) || recs.length === 0) return null;
              
              return (
                <Card key={chakraKey}>
                  <CardHeader className="pb-3 border-l-4" style={{ borderColor: chakraInfo.color }}>
                    <CardTitle className="flex items-center">
                      <div 
                        className="w-6 h-6 rounded-full mr-3"
                        style={{ backgroundColor: chakraInfo.color }}
                      ></div>
                      Recommendations for {chakraInfo.name}
                    </CardTitle>
                    <CardDescription>
                      Personalized healing recommendations based on your chakra assessment
                    </CardDescription>
                  </CardHeader>
                  <CardContent className="pt-0">
                    <ul className="space-y-3">
                      {recs.map((rec, idx) => (
                        <li key={idx} className="p-3 bg-neutral-50 rounded-lg">
                          {rec}
                        </li>
                      ))}
                    </ul>
                  </CardContent>
                </Card>
              );
            })}
          </TabsContent>
          
          <TabsContent value="coaching" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="text-xl">AI Coach Guidance</CardTitle>
                <CardDescription>
                  Get personalized coaching based on your chakra assessment results
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-6">
                  <div className="bg-neutral-50 p-4 rounded-lg border border-neutral-200">
                    <h3 className="text-lg font-medium mb-3">Your Coaching Recommendation</h3>
                    <p className="mb-4">{coachingRecommendations.generalRecommendation}</p>
                    
                    <div className="flex items-center gap-4 p-3 bg-[#483D8B]/10 rounded-lg mb-4">
                      <div className="flex-shrink-0 w-16 h-16 rounded-full bg-[#483D8B]/20 flex items-center justify-center text-2xl">
                        {coachingRecommendations.recommendedCoach === "inner_child" ? "👶" :
                         coachingRecommendations.recommendedCoach === "shadow_self" ? "🌗" :
                         coachingRecommendations.recommendedCoach === "higher_self" ? "✨" : "🧩"}
                      </div>
                      <div className="flex-grow">
                        <h4 className="font-medium">
                          {coachingRecommendations.recommendedCoach === "inner_child" ? "Inner Child Coach" :
                           coachingRecommendations.recommendedCoach === "shadow_self" ? "Shadow Self Coach" :
                           coachingRecommendations.recommendedCoach === "higher_self" ? "Higher Self Coach" : 
                           "Integration Coach"}
                        </h4>
                        <p className="text-sm text-neutral-600">
                          {coachingRecommendations.recommendedCoach === "inner_child" ? "Healing wounds from the past" :
                           coachingRecommendations.recommendedCoach === "shadow_self" ? "Embracing your whole self" :
                           coachingRecommendations.recommendedCoach === "higher_self" ? "Connecting to your essence" : 
                           "Unifying your journey"}
                        </p>
                      </div>
                    </div>
                    
                    <h3 className="text-lg font-medium mb-2">Focus Area</h3>
                    <div className="p-3 border border-dashed rounded-lg mb-4">
                      <div className="flex items-center mb-3">
                        <div 
                          className="w-4 h-4 rounded-full mr-2"
                          style={{ backgroundColor: chakras.find(c => c.key === coachingRecommendations.focusChakra.key)?.color || '#483D8B' }}
                        ></div>
                        <span className="font-medium">{coachingRecommendations.focusChakra.name} Chakra</span>
                      </div>
                      <p className="text-sm mb-3">{coachingRecommendations.focusChakra.description}</p>
                    </div>
                    
                    <h3 className="text-lg font-medium mb-2">Reflective Questions</h3>
                    <p className="text-sm text-neutral-600 mb-3">
                      Your coach might explore these questions with you:
                    </p>
                    <ul className="space-y-2">
                      {coachingRecommendations.coachingFocus.map((question, idx) => (
                        <li key={idx} className="p-2 bg-white rounded border border-neutral-200 text-sm">
                          {question}
                        </li>
                      ))}
                    </ul>
                  </div>
                  
                  <Button 
                    className="w-full bg-[#483D8B] hover:bg-opacity-90"
                    onClick={() => setLocation(`/coach/${coachingRecommendations.recommendedCoach}`)}
                  >
                    <MessageCircle className="w-4 h-4 mr-2" />
                    Start Coaching Session
                  </Button>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
        
        {/* Action buttons */}
        <div className="flex flex-col sm:flex-row gap-4 justify-center mt-8">
          <Button 
            variant="outline" 
            onClick={() => {
              const loc = window.location;
              loc.assign(`${loc.protocol}//${loc.host}/chakra-assessment`);
            }}
          >
            Update Assessment
          </Button>
          <Button 
            onClick={generatePdfReport} 
            disabled={loadingPdf}
          >
            {loadingPdf ? (
              <>
                <div className="w-4 h-4 mr-2 rounded-full border-2 border-t-transparent border-current animate-spin"></div>
                Generating...
              </>
            ) : (
              <>
                <Download className="w-4 h-4 mr-2" />
                Download Report
              </>
            )}
          </Button>
        </div>
      </div>
    </div>
  );
}
