import { createContext, ReactNode, useContext, useState, useEffect } from "react";

// Define translations for UI elements in different languages
const TRANSLATIONS: Record<string, Record<string, string>> = {
  english: {
    // Navigation
    home: "Home",
    journal: "Journal",
    coaches: "Coaches",
    rituals: "Healing Rituals",
    courses: "Courses",
    community: "Community",
    membership: "Membership",
    profile: "Profile",
    darkMode: "Dark Mode",
    lightMode: "Light Mode",
    logout: "Logout",
    login: "Login",
    register: "Register",
    
    // Common
    loading: "Loading...",
    save: "Save",
    cancel: "Cancel",
    edit: "Edit",
    delete: "Delete",
    view: "View",
    search: "Search",
    submit: "Submit",
    
    // Journal page
    title: "Daily Alignment Journal",
    subtitle: "Record your thoughts, emotions, and goals with AI-powered insights to guide your healing journey",
    newEntry: "New Journal Entry",
    newEntryDescription: "Express your thoughts, emotions, and aspirations in this structured journal",
    general: "General",
    gratitude: "Gratitude",
    affirmation: "Affirmation",
    shortTerm: "Short-Term",
    longTerm: "Long-Term",
    insightsTitle: "Journal Insights",
    insightsDescription: "AI-generated insights from your journal entries",
    generalTitle: "ЁЯТн General Reflections",
    generalDescription: "Write freely about your thoughts, emotions, and experiences",
    generalPlaceholder: "How are you feeling today? What's on your mind?",
    gratitudeTitle: "тЬи I am grateful for...",
    gratitudeDescription: "List things that brought you joy, peace, or inspiration today",
    gratitudePlaceholder: "Gratitude",
    affirmationTitle: "ЁЯМЯ Today's Affirmation",
    affirmationDescription: "Write a positive I AM statement to align your energy",
    affirmationPlaceholder: "I am...",
    shortTermTitle: "ЁЯОп Steps I will take today",
    shortTermDescription: "What key actions will move you forward today?",
    shortTermPlaceholder: "Step",
    longTermTitle: "ЁЯЪА Steps toward my long-term goals",
    longTermDescription: "What aligned actions or habits will move you toward your vision?",
    longTermPlaceholder: "My long-term vision includes...",
    saveButton: "Save Entry",
    addAnother: "Add Another",
    emotionPatterns: "Emotion Patterns",
    chakraBalance: "Chakra Balance",
    goalProgress: "Goal Progress",
    personalizedWisdom: "Personalized Wisdom",
    noEntries: "No journal entries yet",
    startWriting: "Start writing to see your insights here",
    voiceJournal: "Voice Journal",
    stopRecording: "Stop Recording"
  },
  hindi: {
    // Navigation
    home: "рд╣реЛрдо",
    journal: "рдЬрд░реНрдирд▓",
    coaches: "рдХреЛрдЪ",
    rituals: "рд╣реАрд▓рд┐рдВрдЧ рдЕрдиреБрд╖реНрдард╛рди",
    courses: "рдкрд╛рдареНрдпрдХреНрд░рдо",
    community: "рд╕рдореБрджрд╛рдп",
    membership: "рд╕рджрд╕реНрдпрддрд╛",
    profile: "рдкреНрд░реЛрдлрд╛рдЗрд▓",
    darkMode: "рдбрд╛рд░реНрдХ рдореЛрдб",
    lightMode: "рд▓рд╛рдЗрдЯ рдореЛрдб",
    logout: "рд▓реЙрдЧ рдЖрдЙрдЯ",
    login: "рд▓реЙрдЧ рдЗрди",
    register: "рд░рдЬрд┐рд╕реНрдЯрд░",
    
    // Common
    loading: "рд▓реЛрдб рд╣реЛ рд░рд╣рд╛ рд╣реИ...",
    save: "рд╕рд╣реЗрдЬреЗрдВ",
    cancel: "рд░рджреНрдж рдХрд░реЗрдВ",
    edit: "рд╕рдВрдкрд╛рджрд┐рдд рдХрд░реЗрдВ",
    delete: "рд╣рдЯрд╛рдПрдВ",
    view: "рджреЗрдЦреЗрдВ",
    search: "рдЦреЛрдЬреЗрдВ",
    submit: "рдЬрдорд╛ рдХрд░реЗрдВ",
    
    // Journal page
    title: "рджреИрдирд┐рдХ рд╕рдВрд░реЗрдЦрдг рдЬрд░реНрдирд▓",
    subtitle: "рдЕрдкрдиреЗ рдЙрдкрдЪрд╛рд░ рдпрд╛рддреНрд░рд╛ рдХреЛ рдорд╛рд░реНрдЧрджрд░реНрд╢рди рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП AI-рд╕рдВрдЪрд╛рд▓рд┐рдд рдЕрдВрддрд░реНрджреГрд╖реНрдЯрд┐ рдХреЗ рд╕рд╛рде рдЕрдкрдиреЗ рд╡рд┐рдЪрд╛рд░реЛрдВ, рднрд╛рд╡рдирд╛рдУрдВ рдФрд░ рд▓рдХреНрд╖реНрдпреЛрдВ рдХреЛ рд░рд┐рдХреЙрд░реНрдб рдХрд░реЗрдВ",
    newEntry: "рдирдИ рдЬрд░реНрдирд▓ рдПрдВрдЯреНрд░реА",
    newEntryDescription: "рдЗрд╕ рд╕рдВрд░рдЪрд┐рдд рдЬрд░реНрдирд▓ рдореЗрдВ рдЕрдкрдиреЗ рд╡рд┐рдЪрд╛рд░реЛрдВ, рднрд╛рд╡рдирд╛рдУрдВ рдФрд░ рдЖрдХрд╛рдВрдХреНрд╖рд╛рдУрдВ рдХреЛ рд╡реНрдпрдХреНрдд рдХрд░реЗрдВ",
    general: "рд╕рд╛рдорд╛рдиреНрдп",
    gratitude: "рдХреГрддрдЬреНрдЮрддрд╛",
    affirmation: "рджреГрдврд╝реАрдХрд░рдг",
    shortTerm: "рдЕрд▓реНрдкрдХрд╛рд▓рд┐рдХ",
    longTerm: "рджреАрд░реНрдШрдХрд╛рд▓рд┐рдХ",
    insightsTitle: "рдЬрд░реНрдирд▓ рдЕрдВрддрд░реНрджреГрд╖реНрдЯрд┐",
    insightsDescription: "рдЖрдкрдХреА рдЬрд░реНрдирд▓ рдкреНрд░рд╡рд┐рд╖реНрдЯрд┐рдпреЛрдВ рд╕реЗ AI-рдирд┐рд░реНрдорд┐рдд рдЕрдВрддрд░реНрджреГрд╖реНрдЯрд┐",
    generalTitle: "ЁЯТн рд╕рд╛рдорд╛рдиреНрдп рдЪрд┐рдВрддрди",
    generalDescription: "рдЕрдкрдиреЗ рд╡рд┐рдЪрд╛рд░реЛрдВ, рднрд╛рд╡рдирд╛рдУрдВ рдФрд░ рдЕрдиреБрднрд╡реЛрдВ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рд╕реНрд╡рддрдВрддреНрд░ рд░реВрдк рд╕реЗ рд▓рд┐рдЦреЗрдВ",
    generalPlaceholder: "рдЖрдЬ рдЖрдк рдХреИрд╕рд╛ рдорд╣рд╕реВрд╕ рдХрд░ рд░рд╣реЗ рд╣реИрдВ? рдЖрдкрдХреЗ рдорди рдореЗрдВ рдХреНрдпрд╛ рд╣реИ?",
    gratitudeTitle: "тЬи рдореИрдВ рдЗрд╕рдХреЗ рд▓рд┐рдП рдЖрднрд╛рд░реА рд╣реВрдБ...",
    gratitudeDescription: "рдЙрди рдЪреАрдЬреЛрдВ рдХреА рд╕реВрдЪреА рдмрдирд╛рдПрдВ рдЬрд┐рдиреНрд╣реЛрдВрдиреЗ рдЖрдкрдХреЛ рдЖрдЬ рдЦреБрд╢реА, рд╢рд╛рдВрддрд┐ рдпрд╛ рдкреНрд░реЗрд░рдгрд╛ рджреА",
    gratitudePlaceholder: "рдХреГрддрдЬреНрдЮрддрд╛",
    affirmationTitle: "ЁЯМЯ рдЖрдЬ рдХрд╛ рджреГрдврд╝реАрдХрд░рдг",
    affirmationDescription: "рдЕрдкрдиреА рдКрд░реНрдЬрд╛ рдХреЛ рд╕рдВрд░реЗрдЦрд┐рдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдПрдХ рд╕рдХрд╛рд░рд╛рддреНрдордХ рдореИрдВ рд╣реВрдБ рдХрдерди рд▓рд┐рдЦреЗрдВ",
    affirmationPlaceholder: "рдореИрдВ рд╣реВрдБ...",
    shortTermTitle: "ЁЯОп рдЖрдЬ рдореИрдВ рдЬреЛ рдХрджрдо рдЙрдард╛рдКрдВрдЧрд╛",
    shortTermDescription: "рдХреМрди рд╕реЗ рдкреНрд░рдореБрдЦ рдХрд╛рд░реНрдп рдЖрдкрдХреЛ рдЖрдЬ рдЖрдЧреЗ рдмрдврд╝рд╛рдПрдВрдЧреЗ?",
    shortTermPlaceholder: "рдХрджрдо",
    longTermTitle: "ЁЯЪА рдореЗрд░реЗ рджреАрд░реНрдШрдХрд╛рд▓рд┐рдХ рд▓рдХреНрд╖реНрдпреЛрдВ рдХреА рдУрд░ рдХрджрдо",
    longTermDescription: "рдХреМрди рд╕реЗ рд╕рдВрд░реЗрдЦрд┐рдд рдХрд╛рд░реНрдп рдпрд╛ рдЖрджрддреЗрдВ рдЖрдкрдХреЛ рдЕрдкрдиреА рджреГрд╖реНрдЯрд┐ рдХреА рдУрд░ рд▓реЗ рдЬрд╛рдПрдВрдЧреА?",
    longTermPlaceholder: "рдореЗрд░реА рджреАрд░реНрдШрдХрд╛рд▓рд┐рдХ рджреГрд╖реНрдЯрд┐ рдореЗрдВ рд╢рд╛рдорд┐рд▓ рд╣реИ...",
    saveButton: "рдкреНрд░рд╡рд┐рд╖реНрдЯрд┐ рд╕рд╣реЗрдЬреЗрдВ",
    addAnother: "рдПрдХ рдФрд░ рдЬреЛрдбрд╝реЗрдВ",
    emotionPatterns: "рднрд╛рд╡рдирд╛ рдкреИрдЯрд░реНрди",
    chakraBalance: "рдЪрдХреНрд░ рд╕рдВрддреБрд▓рди",
    goalProgress: "рд▓рдХреНрд╖реНрдп рдкреНрд░рдЧрддрд┐",
    personalizedWisdom: "рд╡реНрдпрдХреНрддрд┐рдЧрдд рдЬреНрдЮрд╛рди",
    noEntries: "рдЕрднреА рддрдХ рдХреЛрдИ рдЬрд░реНрдирд▓ рдкреНрд░рд╡рд┐рд╖реНрдЯрд┐рдпрд╛рдБ рдирд╣реАрдВ рд╣реИрдВ",
    startWriting: "рдЕрдкрдиреА рдЕрдВрддрд░реНрджреГрд╖реНрдЯрд┐ рдпрд╣рд╛рдВ рджреЗрдЦрдиреЗ рдХреЗ рд▓рд┐рдП рд▓рд┐рдЦрдирд╛ рд╢реБрд░реВ рдХрд░реЗрдВ",
    voiceJournal: "рдЖрд╡рд╛рдЬ рдЬрд░реНрдирд▓",
    stopRecording: "рд░рд┐рдХреЙрд░реНрдбрд┐рдВрдЧ рдмрдВрдж рдХрд░реЗрдВ"
  },
  tamil: {
    // Navigation
    home: "роорпБроХрокрпНрокрпБ",
    journal: "рокродро┐ро╡рпЗроЯрпБ",
    coaches: "рокропро┐ро▒рпНроЪро┐ропро╛ро│ро░рпНроХро│рпН",
    rituals: "роХрпБрогрооро╛роХрпНроХро▓рпН роЪроЯроЩрпНроХрпБроХро│рпН",
    courses: "рокро╛роЯроирпЖро▒ро┐роХро│рпН",
    community: "роЪроорпВроХроорпН",
    membership: "роЙро▒рпБрокрпНрокро┐ройро░рпН",
    profile: "роЪрпБропро╡ро┐ро╡ро░роорпН",
    darkMode: "роЗро░рпБро│рпН рокропройрпНроорпБро▒рпИ",
    lightMode: "роТро│ро┐ рокропройрпНроорпБро▒рпИ",
    logout: "ро╡рпЖро│ро┐ропрпЗро▒рпБ",
    login: "роЙро│рпНроирпБро┤рпИроп",
    register: "рокродро┐ро╡рпБ роЪрпЖропрпНроп",
    
    // Common
    loading: "роПро▒рпНро▒рпБроХро┐ро▒родрпБ...",
    save: "роЪрпЗрооро┐",
    cancel: "ро░родрпНродрпБ роЪрпЖропрпН",
    edit: "родро┐ро░рпБродрпНродрпБ",
    delete: "роЕро┤ро┐",
    view: "рокро╛ро░рпНро╡рпИ",
    search: "родрпЗроЯрпБ",
    submit: "роЪрооро░рпНрокрпНрокро┐",
    
    // Journal page
    title: "родро┐ройроЪро░ро┐ роЪрпАро░роорпИрокрпНрокрпБ рокродро┐ро╡рпЗроЯрпБ",
    subtitle: "роЙроЩрпНроХро│рпН роХрпБрогрооро╛роХрпНроХро▓рпН рокропрогродрпНродрпИ ро╡ро┤ро┐роироЯродрпНрод AI-роЙро░рпБро╡ро╛роХрпНроХро┐роп роирпБрогрпНрогро▒ро┐ро╡рпБроХро│рпБроЯройрпН роЙроЩрпНроХро│рпН роОрогрпНрогроЩрпНроХро│рпН, роЙрогро░рпНро╡рпБроХро│рпН рооро▒рпНро▒рпБроорпН роЗро▓роХрпНроХрпБроХро│рпИрокрпН рокродро┐ро╡рпБ роЪрпЖропрпНропрпБроЩрпНроХро│рпН",
    newEntry: "рокрпБродро┐роп рокродро┐ро╡рпЗроЯрпБ роЙро│рпНро│рпАроЯрпБ",
    newEntryDescription: "роЗроирпНрод роХроЯрпНроЯроорпИроХрпНроХрокрпНрокроЯрпНроЯ рокродро┐ро╡рпЗроЯрпНроЯро┐ро▓рпН роЙроЩрпНроХро│рпН роОрогрпНрогроЩрпНроХро│рпН, роЙрогро░рпНро╡рпБроХро│рпН рооро▒рпНро▒рпБроорпН ро╡ро┐ро░рпБрокрпНрокроЩрпНроХро│рпИ ро╡рпЖро│ро┐рокрпНрокроЯрпБродрпНродрпБроЩрпНроХро│рпН",
    general: "рокрпКродрпБ",
    gratitude: "роиройрпНро▒ро┐",
    affirmation: "роЙро▒рпБродро┐роорпКро┤ро┐",
    shortTerm: "роХрпБро▒рпБроХро┐роп роХро╛ро▓",
    longTerm: "роирпАрогрпНроЯ роХро╛ро▓",
    insightsTitle: "рокродро┐ро╡рпЗроЯрпБ роирпБрогрпНрогро▒ро┐ро╡рпБроХро│рпН",
    insightsDescription: "роЙроЩрпНроХро│рпН рокродро┐ро╡рпБроХро│ро┐ро▓рпН роЗро░рпБроирпНродрпБ AI роЙро░рпБро╡ро╛роХрпНроХро┐роп роирпБрогрпНрогро▒ро┐ро╡рпБроХро│рпН",
    generalTitle: "ЁЯТн рокрпКродрпБ роЪро┐роирпНродройрпИроХро│рпН",
    generalDescription: "роЙроЩрпНроХро│рпН роОрогрпНрогроЩрпНроХро│рпН, роЙрогро░рпНро╡рпБроХро│рпН рооро▒рпНро▒рпБроорпН роЕройрпБрокро╡роЩрпНроХро│рпИ роЪрпБродроирпНродро┐ро░рооро╛роХ роОро┤рпБродрпБроЩрпНроХро│рпН",
    generalPlaceholder: "роЗройрпНро▒рпБ роирпАроЩрпНроХро│рпН роОрокрпНрокроЯро┐ роЙрогро░рпНроХро┐ро▒рпАро░рпНроХро│рпН? роЙроЩрпНроХро│рпН рооройродро┐ро▓рпН роОройрпНрой роЙро│рпНро│родрпБ?",
    gratitudeTitle: "тЬи роиро╛ройрпН роЗродро▒рпНроХрпБ роиройрпНро▒ро┐ропрпБро│рпНро│ро╡ройрпН...",
    gratitudeDescription: "роЗройрпНро▒рпБ роЙроЩрпНроХро│рпБроХрпНроХрпБ роороХро┐ро┤рпНроЪрпНроЪро┐, роЕроорпИродро┐ роЕро▓рпНро▓родрпБ роКроХрпНроХродрпНродрпИ роЕро│ро┐родрпНрод ро╡ро┐ро╖ропроЩрпНроХро│рпИ рокроЯрпНроЯро┐ропро▓ро┐роЯрпБроЩрпНроХро│рпН",
    gratitudePlaceholder: "роиройрпНро▒ро┐",
    affirmationTitle: "ЁЯМЯ роЗройрпНро▒рпИроп роЙро▒рпБродро┐роорпКро┤ро┐",
    affirmationDescription: "роЙроЩрпНроХро│рпН роЪроХрпНродро┐ропрпИ роЪрпАро░роорпИроХрпНроХ роТро░рпБ роирпЗро░рпНрооро▒рпИропро╛рой роиро╛ройрпН роЗро░рпБроХрпНроХро┐ро▒рпЗройрпН роЕро▒ро┐роХрпНроХрпИропрпИ роОро┤рпБродрпБроЩрпНроХро│рпН",
    affirmationPlaceholder: "роиро╛ройрпН роЗро░рпБроХрпНроХро┐ро▒рпЗройрпН...",
    shortTermTitle: "ЁЯОп роЗройрпНро▒рпБ роиро╛ройрпН роОроЯрпБроХрпНроХрпБроорпН роироЯро╡роЯро┐роХрпНроХрпИроХро│рпН",
    shortTermDescription: "роОроирпНрод роорпБроХрпНроХро┐роп роЪрпЖропро▓рпНроХро│рпН роЙроЩрпНроХро│рпИ роЗройрпНро▒рпБ роорпБройрпНройрпЗро▒рпНро▒рпБроорпН?",
    shortTermPlaceholder: "рокроЯро┐",
    longTermTitle: "ЁЯЪА роОройрпН роирпАрогрпНроЯ роХро╛ро▓ роЗро▓роХрпНроХрпБроХро│рпИ роирпЛроХрпНроХро┐роп рокроЯро┐роХро│рпН",
    longTermDescription: "роОроирпНрод роЪрпАро░роорпИроХрпНроХрокрпНрокроЯрпНроЯ роЪрпЖропро▓рпНроХро│рпН роЕро▓рпНро▓родрпБ рокро┤роХрпНроХроЩрпНроХро│рпН роЙроЩрпНроХро│рпИ роЙроЩрпНроХро│рпН родрпКро▓рпИроирпЛроХрпНроХрпИ роирпЛроХрпНроХро┐ роироХро░рпНродрпНродрпБроорпН?",
    longTermPlaceholder: "роОройрпН роирпАрогрпНроЯ роХро╛ро▓ родрпКро▓рпИроирпЛроХрпНроХро┐ро▓рпН роЙро│рпНро│ро╡рпИ...",
    saveButton: "рокродро┐ро╡рпИ роЪрпЗрооро┐",
    addAnother: "рооро▒рпНро▒рпКройрпНро▒рпИ роЪрпЗро░рпН",
    emotionPatterns: "роЙрогро░рпНро╡рпБ роорпБро▒рпИроХро│рпН",
    chakraBalance: "роЪроХрпНроХро░ роЪроороиро┐ро▓рпИ",
    goalProgress: "роЗро▓роХрпНроХрпБ роорпБройрпНройрпЗро▒рпНро▒роорпН",
    personalizedWisdom: "родройро┐рокрпНрокропройро╛роХрпНроХрокрпНрокроЯрпНроЯ роЕро▒ро┐ро╡рпБ",
    noEntries: "роЗродрпБро╡ро░рпИ рокродро┐ро╡рпЗроЯрпБ роЙро│рпНро│рпАроЯрпБроХро│рпН роЗро▓рпНро▓рпИ",
    startWriting: "роЙроЩрпНроХро│рпН роирпБрогрпНрогро▒ро┐ро╡рпБроХро│рпИ роЗроЩрпНроХрпЗ рокро╛ро░рпНроХрпНроХ роОро┤рпБрод родрпКроЯроЩрпНроХрпБроЩрпНроХро│рпН",
    voiceJournal: "роХрпБро░ро▓рпН рокродро┐ро╡рпЗроЯрпБ",
    stopRecording: "рокродро┐ро╡рпИ роиро┐ро▒рпБродрпНродрпБ"
  }
};

type LanguageContextType = {
  language: string;
  setLanguage: (language: string) => void;
  t: (key: string) => string;
};

const LanguageContext = createContext<LanguageContextType | null>(null);

export function LanguageProvider({ children }: { children: ReactNode }) {
  const [language, setLanguage] = useState("english");

  // Load the language preference from localStorage on initial render
  useEffect(() => {
    const savedLanguage = localStorage.getItem("soulsync-language");
    if (savedLanguage) {
      setLanguage(savedLanguage);
    }
  }, []);

  // Save language preference to localStorage whenever it changes
  useEffect(() => {
    localStorage.setItem("soulsync-language", language);
  }, [language]);

  // Translation function
  const t = (key: string): string => {
    return TRANSLATIONS[language]?.[key] || TRANSLATIONS.english[key] || key;
  };

  return (
    <LanguageContext.Provider value={{ language, setLanguage, t }}>
      {children}
    </LanguageContext.Provider>
  );
}

// List of supported languages
const LANGUAGES = [
  { name: "English", code: "english" },
  { name: "Hindi", code: "hindi" },
  { name: "Tamil", code: "tamil" },
  { name: "Telugu", code: "telugu" },
  { name: "Malayalam", code: "malayalam" },
  { name: "Kannada", code: "kannada" },
  { name: "Urdu", code: "urdu" }
];

export function useLanguage() {
  const context = useContext(LanguageContext);
  if (!context) {
    throw new Error("useLanguage must be used within a LanguageProvider");
  }
  return { ...context, LANGUAGES };
}